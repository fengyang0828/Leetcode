#1. Binary search in two ways:
recursive

hint: mid + 1 && mid - 1, if we use mid, then it will loop forever and overflow

public int guessNumber(int n) {
        return helper(1, n);
    }

    public int helper(int start, int end)
    {
        // mid use this way!!! otherwise there will be an error called 32-bit overflow
        int mid = start + (end - start) / 2;
        if(guess(mid) == 0)
            return mid;

        if(start >= end)
            return - 1;
        else if(guess(mid) == 1)
            return helper(mid + 1, end);
        else if(guess(mid) == -1)
            return helper(start, mid - 1);
        else
            return 0;
    }


#2. iterative:
public int guessNumber(int n) {
        int left = 1;
        int right = n;
        while(right - left >= 0)
        {
            int mid = left + (right - left) / 2;
            if(guess(mid) == 0)
                return mid;
            else if(guess(mid) == 1)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }
        return -1;

    }



