#1. Since it is a BST, so, when we use inorder to traverse the tree, it will in an acesending order, and the same value will appear in order.
    So we only need to use a global variable to store the pre value of the current node, to compare if they are the same.
    case 1 : same, than count++
    case 2 : not same, count = 1
    can use this way because of BST!!!!!
    otherwise, we should use map

    List<Integer> list = null;
    int max = 0;
    Integer pre = null;
    int count = 1;
    public int[] findMode(TreeNode root) {
        list = (ArrayList) new ArrayList<>();
        int[] result = new int[list.size()];

        if(root == null)
            return result;

        helper(root);
        result = new int[list.size()];
        //System.out.println(list.size());
        for(int i = 0; i < list.size(); i++)
        {
            result[i] = list.get(i);
        }
        return result;
    }

    public void helper(TreeNode root)
    {
        if(root == null)
            return;

        helper(root.left);
        if(pre != null)
        {
            if(pre == root.val)
                count++;
            else
                count = 1;
        }

        if(max == count)
        {
            list.add(root.val);
        }

        else if (max < count)
        {
            list.clear();
            list.add(root.val);
            max = count;
        }
        pre = root.val;
        helper(root.right);
        return;
    }

#2. Follow up: not use any extra space, as I use list
    and one traverse can not make sure O(1) space, because if the tree is in order like 1, 2,....n-1, n, this will cause
    the space to be O(n)
    So, we can traverse twice:
    one pass: to findout the size of the result and the maxcount
    two pass: to really initialize the result array, and use the maxcount to find out the number

        int[] result;
        int index = 0;
        int resultcount = 0;
        int max = 0;
        Integer pre = null;
        int count = 1;

        public int[] findMode(TreeNode root) {
            helper(root);
            result = new int[resultcount];
            pre = null;
            count = 1;
            helper(root);
            return result;
        }

        public void helper(TreeNode root)
        {
            if(root == null)
                return;
            helper(root.left);
            if(pre != null)
            {
                if(pre == root.val)
                    count ++;
                else
                    count = 1;
            }

            if(max == count)
            {
                resultcount ++;
                if(result != null)
                {
                    result[index] = root.val;
                    index++;
                }
            }

            else if(max < count)
            {
                max = count;
                resultcount = 1;
            }
            pre = root.val;
            helper(root.right);
        }