#1. Brute force: recursive : TLE

for every node, there are 2 cases:
1. select itself, then select its grandchild.
2. not select itself, then select its child.
return the max for this two cases.

class Solution {

    int cur = 0;
    public int rob(TreeNode root) {
        if(root == null) return 0;
        return select(root);
    }

    public int select(TreeNode root)
    {
        if(root == null) return 0;
        int case1 = root.val;
        if(root.left != null)
        {
            case1 += select(root.left.left);
            case1 += select(root.left.right);
        }
        if(root.right != null)
        {
            case1 += select(root.right.left);
            case1 += select(root.right.right);
        }
        int case2 = select(root.left) + select(root.right);
        return Math.max(case1, case2);
    }

#2. use a map as DP to solve this problem, if the node is visited, then store the value to avoid repeat calculation

class Solution {

    HashMap<TreeNode, Integer> map;
    public int rob(TreeNode root) {
        if(root == null) return 0;
        map = new HashMap<>();
        return select(root);
    }

    public int select(TreeNode root)
    {
        if(root == null) return 0;
        if(map.containsKey(root)) return map.get(root);
        int case1 = root.val;
        if(root.left != null)
        {
            case1 += select(root.left.left);
            case1 += select(root.left.right);
        }
        if(root.right != null)
        {
            case1 += select(root.right.left);
            case1 += select(root.right.right);
        }
        int case2 = select(root.left) + select(root.right);
        map.put(root, Math.max(case1, case2));
        return Math.max(case1, case2);
    }
}

#3.
dfs all the nodes of the tree, each node return two number,
int[] num, num[0] is the max value while rob this node, num[1] is max value while not rob this value.
Current node return value only depend on its children's value. Transform function should be very easy to understand.

public class Solution {
    public int rob(TreeNode root) {
        int[] num = dfs(root);
        return Math.max(num[0], num[1]);
    }
    private int[] dfs(TreeNode x) {
        if (x == null) return new int[2];
        int[] left = dfs(x.left);
        int[] right = dfs(x.right);
        int[] res = new int[2];
        res[0] = left[1] + right[1] + x.val;
        res[1] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);
        return res;
    }
}