#1. Brute force will cause TLE

    class Solution {
        public int countPrimes(int n) {
            int i = 0;
            int num = 0;
            while (i < n) {
                if (isPrime(i)) {
                    num++;
                }
                i++;
            }
            return num;
        }

        public boolean isPrime(int n) {
            if (n == 1 || n == 0) {
                return false;
            }
            int i = 2;
            while (i <= Math.sqrt(n)) {
                if (n % i == 0) {
                    return false;
                }
                i++;
            }
            return true;
        }
    }

#2. Use the dp solution
    class Solution {
        public int countPrimes(int n) {
            if (n <= 1) {
                return 0;
            }
            boolean[] isNotPrime = new boolean[n];
            isNotPrime[0] = true;
            isNotPrime[1] = true;
            int count = 0;
            for (int i = 2; i < n; i++) {
                if (isNotPrime[i] == false) {
                    count++;
                    for (int j = 2; i * j < n; j++) {
                        isNotPrime[i * j] = true;
                    }
                }
            }
            return count;
        }
    }