#1. Use queue is super easy, and this could be multithreaded without use of locks!
but it is very ineffient in time
time complexity is O(1) for hit
and O(n) for get. n is the number of the hit which is hitted before 5 min.

So, for the input very large, it is not a scale problem
class HitCounter {

    /** Initialize your data structure here. */
    Queue<Integer> q;
    public HitCounter() {
        q = new LinkedList<>();
    }

    /** Record a hit.
        @param timestamp - The current timestamp (in seconds granularity). */
    public void hit(int timestamp) {
        q.offer(timestamp);
    }

    /** Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity). */
    public int getHits(int timestamp) {
        while(!q.isEmpty() && timestamp - q.peek() >= 300)
        {
            q.poll();
        }
        return q.size();
    }
}

follow up: 说如果每秒的点击次数真的是超多，那你该怎么设计呢？
加入1s内进来了1000个hits， 那么我们queue里面就有1000个timestamp，在调用getHits(301), 也就需要删除1000个timestamp， 这样严重影响性能。

use hashmap for scalability and we only remove the timestamp if we want.
#2. Follow up:

public class HitCounter {
HashMap<Integer,Integer> hits;
/** Initialize your data structure here. */
public HitCounter() {
    this.hits = new HashMap<>();
}
/** Record a hit.
    @param timestamp - The current timestamp (in seconds granularity). */
public void hit(int timestamp) {
    hits.put(timestamp, hits.getOrDefault(timestamp,0)+1);
}
/** Return the number of hits in the past 5 minutes.
    @param timestamp - The current timestamp (in seconds granularity). */
public int getHits(int timestamp) {//all time stamps older than 5 mins will be removed, so that the total key size<=300
    int sum = 0;
    Iterator<Map.Entry<Integer,Integer>> entryIterator = hits.entrySet().iterator();
    while(entryIterator.hasNext()){
    	Map.Entry<Integer,Integer> entry = entryIterator.next();
    	if(timestamp-entry.getKey()>=300) entryIterator.remove();
    	else sum += entry.getValue();
    }
    return sum;
}
}
