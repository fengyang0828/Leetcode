#1. The time complexity is O(nlogn) because use the sort
    we only need to compare the last three elements and the first two multiply the last one to find the max one.
class Solution {
    public int maximumProduct(int[] nums) {
        int length = nums.length;
        Arrays.sort(nums);
        return Math.max(nums[0] * nums[1] * nums[length - 1], nums[length - 1] * nums[length - 2] * nums[length - 3]);
    }
}

#2. Or we can find these 5 elements only in O(n) times

    class Solution {
        public int maximumProduct(int[] nums) {
            int max1 = Integer.MIN_VALUE;
            int max2 = Integer.MIN_VALUE;
            int max3 = Integer.MIN_VALUE;
            int min1 = Integer.MAX_VALUE;
            int min2 = Integer.MAX_VALUE;

            for (int n : nums) {
                if (n > max1) {
                    max3 = max2;
                    max2 = max1;
                    max1 = n;
                }
                else if (n > max2) {
                    max3 = max2;
                    max2 = n;
                }
                else if (n > max3){
                    max3 = n;
                }

                if (n < min1) {
                    min2 = min1;
                    min1 = n;
                }
                else if (n < min2){
                    min2 = n;
                }
            }
            return Math.max(max1 * max2 * max3, min1 * min2 * max1);
        }
    }