#1. Same idea with the 3Sum:
    only point is that we need to consider about the j, j must be larger than i + 1, not 0!!!!
    The time complexity is O(n ^ 3)
    class Solution {
        public List<List<Integer>> fourSum(int[] nums, int target) {
            List<List<Integer>> result = (ArrayList)new ArrayList<>();
            Arrays.sort(nums);
            int length = nums.length;
            for (int i = 0; i < length - 3; i++) {
                while (i > 0 && i < length - 3 && nums[i] == nums[i - 1]) {
                    i++;
                }
                for (int j = i + 1; j < length - 2; j++) {
                    while (j > i + 1 && j < length - 2 && nums[j] == nums[j - 1]) {
                        j++;
                    }
                    int p = j + 1;
                    int q = length - 1;
                    while (p < q) {
                        int sum = nums[i] + nums[j] + nums[p] + nums[q];
                        if (sum == target) {
                            ArrayList<Integer> sublist = new ArrayList<>();
                            sublist.add(nums[i]);
                            sublist.add(nums[j]);
                            sublist.add(nums[p]);
                            sublist.add(nums[q]);
                            result.add(sublist);
                            while (p < q && nums[p] == nums[p + 1]) {
                                p++;
                            }
                            while (p < q && nums[q] == nums[q - 1]) {
                                q--;
                            }
                            p++;
                            q--;
                        }
                        else if (sum < target) {
                            p++;
                        }
                        else {
                            q--;
                        }
                    }
                }
            }
            return result;
        }
    }