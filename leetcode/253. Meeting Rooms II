#1. use ProrityQueue to maintain the endtime is the first finished meeting room.
    for every meeting sorted by start time, if its starttime > first finished time
    we can arrange it in this room, otherwise, we must add a new room.

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public int minMeetingRooms(Interval[] intervals) {

        if(intervals == null || intervals.length == 0)
            return 0;

        Arrays.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval a, Interval b)
            {
                return a.start - b.start;
            }
        });

        PriorityQueue<Interval> endtime = new PriorityQueue<Interval>(intervals.length, new Comparator<Interval>(){
           public int compare(Interval a, Interval b)
           {
               return a.end - b.end;
           }
        });
        endtime.offer(intervals[0]);
        for(int i = 1; i < intervals.length; i++)
        {
            if(intervals[i].start >= endtime.peek().end)
                endtime.poll(); // merge the two meeting
            endtime.offer(intervals[i]);
        }

        return endtime.size();

    }
}

#3. A more familiar way to implement compare method:
class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        PriorityQueue<Tuple> pq = new PriorityQueue<>(n, new Comparator<Tuple>(){
            public int compare(Tuple a, Tuple b){
                return a.val - b.val;
            }
        });
        for(int i = 0; i < n; i++){
            pq.offer(new Tuple(0, i, matrix[0][i]));
        }
        for(int i = 0; i < k - 1; i++){
            Tuple t = pq.poll();
            if(t.x == n - 1) continue;
            pq.offer(new Tuple(t.x + 1, t.y, matrix[t.x + 1][t.y]));
        }
        return pq.poll().val;
    }

    private class Tuple{
        int x;
        int y;
        int val;
        public Tuple(int x, int y, int val){
            this.x = x;
            this.y = y;
            this.val = val;
        }
    }
}