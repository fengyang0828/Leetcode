#1. TLE.. brute force
class Solution {
    public int nthUglyNumber(int n) {
        int i = 0;
        int num = 0;
        while (true) {
            if (isUglyNumber(i)) {
                num ++;
            }
            if (num == n) {
                return i;
            }
            i++;
        }
    }

    public boolean isUglyNumber(int n) {
        if (n == 1) {
            return true;
        }
        while (n % 2 == 0) {
            n = n / 2;
        }
        while (n % 3 == 0) {
            n = n / 3;
        }
        while (n % 5 == 0) {
            n = n / 5;
        }
        return n == 1;
    }
}

#2. 巧妙的方法，用idx2，idx3，idx5来表示应该乘2，3，5的dpindex，并选出最小，那么这个数就被用过，判断一下是哪个数是最小，然后＋1
    O(n)
    class Solution {
        public int nthUglyNumber(int n) {
            if (n == 0) {
                return 0;
            }
            int[] dp = new int[n];
            dp[0] = 1;
            int idx2 = 0;
            int idx3 = 0;
            int idx5 = 0;

            for (int i = 1; i < n; i++) {
                int min = Math.min(dp[idx2]*2, dp[idx3]*3);
                min = Math.min(min, dp[idx5] * 5);
                if (min == dp[idx2] * 2) {
                    idx2++;
                }
                if (min == dp[idx3] * 3) {
                    idx3++;
                }
                if (min == dp[idx5] * 5) {
                    idx5++;
                }
                dp[i] = min;
            }
            return dp[n - 1];
        }
    }

#3. PriorityQueue O(nlogn)