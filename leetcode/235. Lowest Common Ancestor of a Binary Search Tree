ï¼ƒ1. For BST
hint: p.val can be larger than q.val, so we should add the p.val > q.val to check for this condition
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) return null;
        if(p.val > q.val)
            return lowestCommonAncestor(root, q, p);
        else if(p.val <= root.val && q.val >= root.val)
            return root;
        else if(q.val < root.val)
            return lowestCommonAncestor(root.left, p, q);
        else if(p.val > root.val)
            return lowestCommonAncestor(root.right, p, q);
        else
            return null;

    }
}

#2. For BT
for every node, traverse its left child node and right child node, if its left returns not null and right returns not null, then root is the LCA
if left = null and right != null, return right
if right = null and left != null, return left
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {

        if(root == null)
            return null;

        if(root == q) return q;
        if(root == p) return p;

        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);

        if(left != null && right != null)
            return root;
        else if(left == null && right != null)
            return right;
        else if(left != null && right == null)
            return left;

        return null;
    }
}