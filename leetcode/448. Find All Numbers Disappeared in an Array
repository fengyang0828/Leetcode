class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {

        // use O(n) space
        // List<Integer> result = (ArrayList)new ArrayList<Integer>();
        // HashSet<Integer> set = new HashSet<Integer>();
        // for(int i = 0; i < nums.length; i++)
        // {
        //     if(!set.contains(nums[i]))
        //         set.add(nums[i]);
        // }
        // for(int i = 0; i< nums.length; i++)
        // {
        //     if(!set.contains(i + 1))
        //         result.add(i + 1);
        // }
        // return result;


        // index = nums[i] - 1
        // use nums[index] to mark if nums[i] exists
                List<Integer> result = (ArrayList)new ArrayList<Integer>();

                for(int i = 0; i < nums.length; i++)
                {
                    // here is a trick because if we have change it to negetive, we will get a negetive index
                    // thus, here we need to change it back.
                    int index = Math.abs(nums[i]) - 1;
                    if(nums[index] > 0)
                    {
                        nums[index] = -nums[index];
                    }
                }

                for(int i = 0; i < nums.length; i++)
                {
                    if(nums[i] > 0)
                        result.add(i+1);
                }

                return result;


    }
}