use two array to solve this problem:
len[i]: the max subsequence that ends with nums[i]
count[i]: the number of subsequence that ends with nums[i]

the most tricky thing is how to compute the count[i]:
    when this[i] + 1 equals max, then count += this.count[j], think about the example 2,2,2,2,2, the len array is 1 1 1 1 1 the count array is 1 1 1 1 1,
                                                                    and output 5.
    when this[i] + 1 > max, means there is need to change count, count[i] = this[j]

class Solution {
    public int findNumberOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int[] len = new int[nums.length];
        int[] count = new int[nums.length];
        len[0] = 1;
        int max_len = 1;
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            int max = 1;
            int n = 1;
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    if (len[j] + 1 == max) {
                        n += count[j];
                    }
                    else if (len[j] + 1 > max){
                        n = count[j];
                        max = len[j] + 1;
                    }
                }
            }
            len[i] = max;
            count[i] = n;
            max_len = Math.max(max, max_len);
        }
        int num = 0;
        for (int i = 0; i < nums.length; i++) {
            if (len[i] == max_len) {
                num += count[i];
            }
        }
        return num;
    }
}