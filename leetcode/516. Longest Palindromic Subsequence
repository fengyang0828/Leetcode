#1. up to down solution
class Solution {
    public int longestPalindromeSubseq(String s) {
        // consider substrings starting at left and ending at right
        // the function would be dp[i][j] = dp[i + 1][j - 1] + 2 if s.charAt(i) == s.charAt(j)
                                       // = max(dp[i + 1][j], dp[i][j - 1])
        int len = s.length();
        int[][] dp = new int[len][len];

        for(int i = 0; i < len; i++)
        {
            for(int j = 0; j < len; j++)
            {
                dp[i][j] = 0;
            }
        }
        return helper(dp, 0, len - 1, s);
    }

    public int helper(int[][] dp, int i, int j, String s)
    {
        if(i == j){
            dp[i][j] = 1;
            return 1;
        }
        if(i > j)
        {
            dp[i][j] = 0;
            return 0;
        }

        if(dp[i][j] != 0)
            return dp[i][j];

        if(s.charAt(i) == s.charAt(j))
            dp[i][j] = helper(dp, i + 1, j - 1, s) + 2;
        else
            dp[i][j] = Math.max(helper(dp, i + 1, j, s), helper(dp, i, j - 1, s));

        return dp[i][j];
    }


}

#2. buttom up solution
        int len = s.length();
        int[][] dp = new int[len][len];
        for(int i = 0; i < len; i++)
        {
            dp[i][i] = 1;
        }

        //for each interval length
        for(int l = 2; l <= len; l++)
        {
            for(int i = 0; i <= len - l; i++)
            {
                // here is the point!!! do not forget -1
                int j = i + l - 1;
                if(s.charAt(i) == s.charAt(j))
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                else
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
            }
        }

        return dp[0][len - 1];
    }