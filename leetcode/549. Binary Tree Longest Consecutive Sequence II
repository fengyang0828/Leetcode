#1. Solution:
There is difference because we need to consider ascending and decreasing sequence
for each node:
result[0]: the increasing number
4
5
6
result[1]: the decreasing sequence
3
2
1
for every node, the initial result[0] and result[1] is 1.
first we caculate the left child of this node, and get a result.
then, we caculate the right child of this node, notice that we only want the max one of leftsubtree and rightsubtree,
so here we use max to update the result.

now, we get a result with a node has decreasing number and increasing number.
also we can find that for every node, like 1-2-3, its number would be its decreasing number plus its increasing number - 1!!

class Solution {
    int max = 0;
    public int longestConsecutive(TreeNode root) {
        helper(root);
        return max;
    }

    public int[] helper(TreeNode root)
    {
        if(root == null) return new int[2];
        int[] result = new int[2];
        result[0] = 1;
        result[1] = 1;
        if(root.left != null)
        {
            int[] left = helper(root.left);
            if(root.val == root.left.val - 1)
                result[0] = left[0] + 1;
            if(root.val == root.left.val + 1)
                result[1] = left[1] + 1;
        }

        if(root.right != null)
        {
            int[] right = helper(root.right);
            if(root.val == root.right.val + 1)
                result[1] = Math.max(result[1], right[1] + 1);
            if(root.val == root.right.val - 1)
                result[0] = Math.max(result[0], right[0] + 1);
        }
        max = Math.max(max, result[0] + result[1] - 1);
        return result;
    }
}