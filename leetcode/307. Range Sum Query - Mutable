#1. Brute force will cause TLE...
class NumArray {
    int len = 0;
    int[] nums;
    int[] dp;

    public NumArray(int[] nums) {
        if(nums == null || nums.length == 0) return;
        this.nums = nums;
        len = nums.length;
        dp = new int[len];
        int sum = 0;
        for(int i = 0; i < len; i++)
        {
            sum += nums[i];
            dp[i] = sum;
        }
    }

    public void update(int i, int val) {
        int diff = val - nums[i];
        for(int k = i; k < len; k++)
        {
            dp[k] = dp[k] - nums[i] + val;
        }

        nums[i] = val;
    }

    public int sumRange(int i, int j) {
        if(i < 1) return dp[j];
        else
            return dp[j] - dp[i - 1];
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */


 #2. Solution 2 use segement tree!!
 class NumArray {

     private class segementreeNode{
         int start;
         int end;
         segementreeNode left, right;
         int sum;

         public segementreeNode(int start, int end)
         {
             this.start = start;
             this.end = end;
             this.left = null;
             this.right = null;
             int sum = 0;
         }
     }

     segementreeNode root = null;
     public NumArray(int[] nums) {
         if(nums == null || nums.length == 0) return;
         root = buildtree(nums, 0, nums.length - 1);
     }

     public segementreeNode buildtree(int[] nums, int start, int end)
     {
         if(start > end) return null;
         if(start == end) {
             segementreeNode leafnode = new segementreeNode(start, start);
             leafnode.sum = nums[start];
             return leafnode;
         }
         segementreeNode node = new segementreeNode(start, end);
         int mid = start + (end - start) / 2;
         node.left = buildtree(nums, start, mid);
         node.right = buildtree(nums, mid + 1, end);
         node.sum = node.left.sum + node.right.sum;
         return node;
     }

     public void update(int i, int val) {
         update(root, i, val);
     }

     public void update(segementreeNode root, int start, int val)
     {
         if(root.start == root.end)
         {
             root.sum = val;
             return;
         }
         int mid = root.start + (root.end - root.start) / 2;
         if(start >= mid + 1)
         {
             update(root.right, start, val);
         }
         else
             update(root.left, start, val);
         root.sum = root.left.sum + root.right.sum;
     }

     public int sumRange(int i, int j) {
         return sumRange(root, i, j);
     }

     public int sumRange(segementreeNode root, int start, int end)
     {
         if(root.start == start && root.end == end) return root.sum;
         int mid = root.start + (root.end - root.start) / 2;
         if(end <= mid)
             return sumRange(root.left, start, end);
         else if(start >= mid + 1)
             return sumRange(root.right, start, end);
         else
             return sumRange(root.left, start, mid) + sumRange(root.right, mid + 1, end);

     }
 }
 #3. Bit index tree:~!
 int[] nums;
 	int[] BIT;
 	int n;

 	public NumArray(int[] nums) {
 		this.nums = nums;

 		n = nums.length;
 		BIT = new int[n + 1];
 		for (int i = 0; i < n; i++)
 			init(i, nums[i]);
 	}

 	public void init(int i, int val) {
 		i++;
 		while (i <= n) {
 			BIT[i] += val;
 			i += (i & -i);
 		}
 	}

 	void update(int i, int val) {
 		int diff = val - nums[i];
 		nums[i] = val;
 		init(i, diff);
 	}

 	public int getSum(int i) {
 		int sum = 0;
 		i++;
 		while (i > 0) {
 			sum += BIT[i];
 			i -= (i & -i);
 		}
 		return sum;
 	}

 	public int sumRange(int i, int j) {
 		return getSum(j) - getSum(i - 1);
 	}
 }
