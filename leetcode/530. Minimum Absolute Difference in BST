#1. Since it is a BST, so the minimum difference can only be found between one node and its successor, so we can inorder
    // traverse the BST and compare every node and its successor
    int min = Integer.MAX_VALUE;
    Integer pre = null;
    public int getMinimumDifference(TreeNode root) {
        helper(root);
        return min;
    }

    public void helper(TreeNode root){
        if(root == null) return;
        helper(root.left);
        if(pre != null)
        {
            int diff = root.val - pre;
            min = Math.min(diff, min);
        }
        pre = root.val;
        helper(root.right);
    }

#2. Follow up:
What if it is not a BST? (Follow up of the problem) The idea is to put values in a TreeSet and then every time we can use O(lgN) time to lookup for the nearest values.
Solution 2 - Pre-Order traverse, time complexity O(NlgN), space complexity O(N).

public class Solution {
    TreeSet<Integer> set = new TreeSet<>();
    int min = Integer.MAX_VALUE;

    public int getMinimumDifference(TreeNode root) {
        if (root == null) return min;

        if (!set.isEmpty()) {
            if (set.floor(root.val) != null) {
                min = Math.min(min, root.val - set.floor(root.val));
            }
            if (set.ceiling(root.val) != null) {
                min = Math.min(min, set.ceiling(root.val) - root.val);
            }
        }

        set.add(root.val);

        getMinimumDifference(root.left);
        getMinimumDifference(root.right);

        return min;
    }
}