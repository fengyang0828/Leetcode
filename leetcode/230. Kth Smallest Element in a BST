/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
//     use extra space:
    //LinkedList<Integer> list = new LinkedList<Integer>();

//     public int kthSmallest(TreeNode root, int k) {
//         inorder(root);
//         return list.get(k - 1);

//     }
//     public void inorder(TreeNode root)
//     {
//         if(root == null) return;
//         inorder(root.left);
//         list.add(root.val);
//         inorder(root.right);
//     }

    // do not use extra space:
//     int count = 0;
//     int result = 0;
//     public int kthSmallest(TreeNode root, int k) {

//         return inorder(root,k);
//     }

//     public int inorder(TreeNode root, int k){
//         if(root == null) return 0;
//         inorder(root.left, k);
//         count++;
//         if(count == k) result = root.val;
//         inorder(root.right, k);
//         return result;
//     }

    // follow up:

    public int kthSmallest(TreeNode root, int k) {
        if(root == null) return 0;
        int left = nodecount(root.left);
        if(left + 1 == k)
            return root.val;
        else if(left + 1 < k)
        {
            return kthSmallest(root.right, k - left - 1);
        }
        else
        {
            return kthSmallest(root.left, k);
        }
    }

    public int nodecount(TreeNode root)
    {
        if(root == null) return 0;
        return 1 + nodecount(root.left) + nodecount(root.right);
    }


}