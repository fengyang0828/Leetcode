class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        int minCount = Integer.MAX_VALUE;
        if(beginWord.length() != endWord.length()) return 0;

        Set<String> visited = new HashSet<>();
        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);

        int count = 0;
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                String temp = q.poll();
                if(temp.equals(endWord))
                    minCount = Math.min(minCount, count);
                else{
                    if(visited.contains(temp)) continue;
                    else
                    {
                        visited.add(temp);
                        Set<String> candidate = new HashSet<>();
                        candidate = findDiffInOneCharacter(temp, wordList);
                        for(String s: candidate){
                            q.offer(s);
                        }
                    }
                }
            }
            count++;
        }
        return minCount == Integer.MAX_VALUE? 0: minCount + 1;
    }

    public Set<String> findDiffInOneCharacter(String beginWord, List<String> wordList){
        Set<String> candidate = new HashSet<>();
        for(String s: wordList){
            int count = 0;
            for(int i = 0; i < s.length(); i++){
                if(count > 1) break;
                if(s.charAt(i) != beginWord.charAt(i))
                    count++;
            }
            if(count == 1)
                candidate.add(s);
        }
        return candidate;
    }
}