#1. Solution 1: use sum[i][j + 1] stores the sum value from matrix[0][0] to matrix[i][j]
the time complexity is O(n) in constructer and O(3) in query.
class NumMatrix {

    int m = 0;
    int n = 0;
    int[][] matrix;
    int[][] sum;
    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return;
        this.matrix = matrix;
        m = matrix.length;
        n = matrix[0].length;
        sum = new int[m + 1][n + 1];
        //sum[i][j + 1] stores the sum value from matrix[0][0] to matrix[i][j]
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
                sum[i][j + 1] = sum[i][j] + matrix[i][j];
        }
    }

    public int sumRegion(int row1, int col1, int row2, int col2) {
        long rt = 0;
        for (int i = row1; i <= row2; i++) {
            rt += sum[i][col2 + 1] - sum[i][col1];
        }
        return (int) rt;
    }
}

#2. use sum[i][j] stores the sum value from matrix[0][0] to matrix[i - 1][j - 1]
class NumMatrix {

    int m = 0;
    int n = 0;
    int[][] matrix;
    int[][] sum;
    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return;
        this.matrix = matrix;
        m = matrix.length;
        n = matrix[0].length;
        sum = new int[m + 1][n + 1];

        //sum[i][j] stores the sum value from matrix[0][0] to matrix[i - 1][j - 1]
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + matrix[i - 1][j - 1];
        }


    }

    public int sumRegion(int row1, int col1, int row2, int col2) {

        return sum[row2 + 1][col2 + 1] - sum[row1][col2 + 1] - sum[row2 + 1][col1] + sum[row1][col1];
    }
}