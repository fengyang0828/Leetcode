class Solution {


     ＃ recursive method
     List<List<String>> result = null;
     List<String> currlist = null;
     public List<List<String>> partition(String s) {

         result = (ArrayList) new ArrayList<ArrayList<String>>();
         currlist = (ArrayList) new ArrayList<String>();
         dfs(s, 0);
         return result;
     }

     public void dfs(String s, int start)
     {
         if(start >= s.length())
         {
             //currlist must be clone in this case, because other list will replace it.
             result.add(new ArrayList<String>(currlist));
             return; // end of the string
         }
         for(int i = start; i < s.length(); i++)
         {
             if(isPalindrome(s, start, i))
             {
                 currlist.add(s.substring(start, i + 1));
                 dfs(s, i + 1);
                 currlist.remove(currlist.size() - 1);
             }
         }
         return;
     }

     public boolean isPalindrome(String s, int head, int tail)
     {
         while(head < tail)
         {
             if(s.charAt(head) != s.charAt(tail))
                 return false;
             head ++;
             tail --;
         }
         return true;
     }

    ＃ DP
    List<List<String>> result = null;
    List<String> currlist = null;
    boolean [][] p;
    public List<List<String>> partition(String s) {

        result = (ArrayList) new ArrayList<ArrayList<String>>();
        currlist = (ArrayList) new ArrayList<String>();
        p = new boolean[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++)
        {
            for(int j = 0; j <= i; j++)
            {
                if(s.charAt(i) == s.charAt(j) && (i - j <= 2 || p[j + 1][i - 1]))
                    p[j][i] = true;
            }
        }
        dfs(s, 0);
        return result;
    }

    public void dfs(String s, int start)
    {
        if(start >= s.length())
        {
            //currlist must be clone in this case, because other list will replace it.
            result.add(new ArrayList<String>(currlist));
            return; // end of the string
        }

        for(int i = start; i < s.length(); i++)
        {
            if(p[start][i])
            {
                currlist.add(s.substring(start, i + 1));
                dfs(s, i + 1);
                currlist.remove(currlist.size() - 1);
            }
        }
        return;
    }

}