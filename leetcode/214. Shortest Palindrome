#1. the idea is that we can find the longest palindrome from the first character, and reverse the remaining
    then add it to the front.
    for example, 'babac', the longest palindrome is bab, so we reverse the remain: ac->ca, add ca to the front
     -> cababac

            // The time complexity is O(n/2 * n/2) = O(n^2) in the worst case
class Solution {
    public String shortestPalindrome(String s) {

        int i = 0;
        int j = s.length() - 1;
        int end = s.length() - 1;
        //char chs[] = s.toCharArray();
        while(i < j)
        {
            if(i == s.length() / 2)
                return s;
            if(chs[i] == chs[j])
            {
                i++;
                j--;
            }
            else
            {
                i = 0;
                end --;
                j = end;
            }
        }
        // end is the end point of the longest palindrome
        StringBuilder sb = new StringBuilder(s.substring(end + 1, s.length()));
        String prefix = sb.reverse().toString();
        return sb.toString() + s;
    }
}

ï¼ƒ2. Follow up: not add at the front, but add at any space of the string
// dp[i][j] = dp[i + 1][j - 1] if char[i] == char[j], there is no need to insert
// dp[i][j] = Math.min(dp[i + 1][j],dp[i][j - 1] + 1), we need to insert itself and the minnum of its substring
// recursive way:
       public static int getmin(String s){
           return helper(s, 0, s.length() - 1);
       }

       public static int helper(String s, int l, int h)
       {
           if(l > h) return Integer.MAX_VALUE;
           if(l == h) return 0;
           if(l == h - 1){
               if(s.charAt(l) == s.charAt(h))
                   return 0;
               else
                   return 1;
           }
           if(s.charAt(l) == s.charAt(h)){
               return helper(s, l + 1, h - 1);
           }
           else
           {
               int left = helper(s, l, h - 1);
               int right = helper(s, l + 1, h);
               return Math.min(left, right) + 1;
           }
       }

// DP
use dp[i][j] to represent the mininsert for substring i to j
// top - down
    static int[][] dp;
    public static int getmin(String s){
        dp = new int[s.length()][s.length()];
        helper(s, 0, s.length() - 1);
        return dp[0][s.length() - 1];
    }

    public static int helper(String s, int l, int h) {
        if (l > h) {
            dp[l][h] = Integer.MAX_VALUE;
            return dp[l][h];
        }
        if (l == h) {
            dp[l][h] = 0;
            return dp[l][h];
        }
        if (l == h - 1) {
            if (s.charAt(l) == s.charAt(h)) {
                dp[l][h] = 0;
                return dp[l][h];
            } else {
                dp[l][h] = 1;
                return dp[l][h];
            }
        }
        if (dp[l][h] != 0)
            return dp[l][h];
        if (s.charAt(l) == s.charAt(h)) {
            dp[l][h] = helper(s, l + 1, h - 1);
        } else {
                int left = helper(s, l, h - 1);
                int right = helper(s, l + 1, h);
                dp[l][h] = Math.min(left, right) + 1;
        }
        return dp[l][h];

    }


// buttom to up
static int[][] dp;
    public static int getmin(String s){
        dp = new int[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++)
        {
            dp[i][i] = 0;
        }
        for(int l = 2; l <= s.length(); l++)
        {
            for(int i = 0; i <= s.length() - l; i++){
                int j = i + l - 1;
                if(s.charAt(i) == s.charAt(j))
                    dp[i][j] = dp[i + 1][j - 1];
                else
                    dp[i][j] = Math.min(dp[i + 1][j], dp[i][j - 1]) + 1;
            }
        }
        return dp[0][s.length() - 1];
    }