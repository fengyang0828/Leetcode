#1. DP
the transition function is Dp[i] = DP[i - 1] not rob n
                                 = DP[i - 2] rob n-2 and n
      one special case, dp[1] = max of nums[0] and nums[1]
class Solution {
    int[] dp;
    public int rob(int[] nums) {
        int n = nums.length;
        dp = new int[n + 1];
        if(nums.length == 0 || nums == null) return 0;
        dp[0] = nums[0];
        if(nums.length >= 2)
        dp[1] = Math.max(nums[0], nums[1]);
        for(int i = 2; i < nums.length; i++)
        {
            int money = 0;
            money = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
            dp[i] = money;
        }
        return dp[n - 1];
    }
}

#2. without extra space
public int rob(int[] nums){
        int n = nums.length;
        int previousNotRobbed = 0;
        int previousIsRobbed = 0;
        int current = 0;
        for(int i = 0; i < n; i++)
        {

            // if we do not rob this house, currentnotrobbed is the max of we rob or not rob the previous house.
            int currentNotRobbed = Math.max(previousIsRobbed, previousNotRobbed);

            // If we rob the current house, add the current money robbed to what we got from not robbing previous
            int currentIsRobbed = previousNotRobbed + nums[i];

            // update the value for next iterator
            previousNotRobbed = currentNotRobbed;
            previousIsRobbed =  currentIsRobbed;
        }
        return Math.max(previousNotRobbed, previousIsRobbed);

    }