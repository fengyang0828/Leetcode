These question can be solved by O(1) space if we can modify the input
#1. 2-D DP
    //dp[i][j] represents the minimun path from dp[0][0] to i, j
    // return dp[m - 1][n - 1]
    // transit function dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0)
            return 0;
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0];
        for(int i = 1; i < m; i++)
            dp[i][0] += dp[i - 1][0] + grid[i][0];
        for(int j = 1; j < n; j++)
            dp[0][j] += dp[0][j - 1] + grid[0][j];

        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++)
            {
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }

        return dp[m - 1][n - 1];

    }

#2. 1-D DP
        int[] dp = new int[n];
        dp[0] = grid[0][0];
        for(int i = 1; i < n; i ++)
        {
            dp[i] += dp[i-1] + grid[0][i];
        }

        for(int i = 1; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(j == 0) dp[j] += grid[i][j];
                else if(j > 0)
                    dp[j] = Math.min(dp[j], dp[j - 1]) + grid[i][j];
            }
        }
        return dp[n - 1];

＃3. 从左下走到右下，一共有多少种走法，只有三种放法右，右下，右上
     follow up 有一个点一定要经过
               有一个set的点一定要经过
