// the time complexity is 4 * 4 * 4 * 4 = 256
#1. simply find out all combination of this four characters(with character be reused)
and find out the less one that is valid but larger than the target number

hint: we need to focus on the two special cases
    public String nextClosestTime(String time) {

        char[] digits = new char[4];
        digits[0] = time.charAt(0);
        digits[1] = time.charAt(1);
        digits[2] = time.charAt(3);
        digits[3] = time.charAt(4);

        String t[] = time.split(":");
        int hour = Integer.parseInt(t[0]);
        int minute = Integer.parseInt(t[1]);
        int totalminute = hour * 60 + minute;

        int min = Integer.MAX_VALUE;

        // special case 1:
        if(digits[0] == digits[1] && digits[1] == digits[2] && digits[2] == digits[3])
            return time;

        String result = "";
        for(int i = 0; i < 4; i++)
        {
            for(int j = 0; j < 4; j++)
            {
                for(int m = 0; m < 4; m++)
                {
                    for(int n = 0; n < 4; n++)
                    {
                        String candidate = ""+digits[i] + ""+digits[j] + ":" + ""+digits[m] + ""+digits[n];
                        if(isValidtime(candidate))
                        {
                            String c[] = candidate.split(":");
                            int temp = Integer.parseInt(c[0]) * 60 + Integer.parseInt(c[1]);
                            if(temp > totalminute && temp < min)
                            {
                                min = temp;
                                result = candidate;
                            }
                        }
                    }
                }
            }
        }

        // special case 2:
        if(result.equals(""))
        {
            result = ""+digits[0] + ""+digits[0] + ":" + ""+digits[0] + ""+digits[0];
        }
        return result;


    }

    public boolean isValidtime(String t)
    {
        String time[] = t.split(":");
        int hour = Integer.parseInt(time[0]);
        if( hour> 23 || hour < 0 )
            return false;
        int minute = Integer.parseInt(time[1]);
        if( minute > 59 || minute < 0)
            return false;
        return true;
    }
}


#2. Solution 2

the time complexity is O(4 * 4)
here we sort the digits, and the big idea is that we need to find the next digit for each postion in "HH:MM" from right to left.
case 1: If the next digit is greater than current digit and is valid(not break the validation) return directly and keep other digits unchanged.
case 2: if can not find such digit, which means the next greater digit breaks the validation, we should change this digit to the least one and move on to the left.

Retrieve all four digits from given string and sort them in asscending order, "17:38" -> digits[] {'1', '3', '7', '8'}

Apply findNext() from the right most digit to left most digit, try to find next greater digit from digits[] (if exist) which is suitable for current position, otherwise return the minimum digit (digits[0]):

"HH:M_": there is no upperLimit for this position (0-9). Just pick the next different digit in the sequence. In the example above, '8' is already the greatest one, so we change it into the smallest one (digits[0] i.e. '1') and move to next step: "17:38" -> "17:31"

"HH:_M": the upperLimit is '5' (00~59). The next different digit for '3' is '7', which is greater than '5', so we should omit it and try next. Similarly, '8' is beyond the limit, so we should choose next, i.e. '1': "17:38" -> "17:11"

"H_:MM": the upperLimit depends on result[0]. If result[0] == '2', then it should be no more than '3'; else no upperLimit (0-9). Here we have result[0] = '1', so we could choose any digit we want. The next digit for '7' is '8', so we change it and return the result directly. "17:38" -> "18:11"

"_H:MM": the upperLimit is '2' (00~23). e.g. "03:33" -> "00:00"

        char[] digits = new char[4];
                digits[0] = time.charAt(0);
                digits[1] = time.charAt(1);
                digits[2] = time.charAt(3);
                digits[3] = time.charAt(4);
                char[] result = time.toCharArray();
                Arrays.sort(digits);

                result[4] = findnext(digits, '9', result[4]);
                if(result[4] > time.charAt(4)) return String.valueOf(result);

                result[3] = findnext(digits, '5', result[3]);
                if(result[3] > time.charAt(3)) return String.valueOf(result);

                if(result [0] == '2')
                {
                    result[1] = findnext(digits, '3', result[1]);
                    if(result[1] > time.charAt(1)) return String.valueOf(result);
                }
                else
                {
                    result[1] = findnext(digits, '9', result[1]);
                    if(result[1] > time.charAt(1)) return String.valueOf(result);
                }

                result[0] = findnext(digits, '2', result[0]);
                if(result[0] > time.charAt(0)) return String.valueOf(result);

                return String.valueOf(result);
            }

            public char findnext(char[] digits, char upperlimit, char current)
            {
                if(current == upperlimit)
                {
                    return digits[0];
                }
                for(int i = 0; i < digits.length; i++)
                {
                    if(digits[i] > current && digits[i] <= upperlimit)
                        return digits[i];
                }
                return digits[0];
            }