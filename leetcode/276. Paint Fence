1# DP
There are only 2 possibilities for each n.
1. same with its previous one.
    thus, it will has k - 1 options for f[i - 2]
2. different with its previous one.
    thus, it will have k - 1 options for f[i - 1]
3. f[i] will store all these two situations's sum
4. This is like the Fibonacci array, we need to specify with the base case.
class Solution {

    int count = 0;
    public int numWays(int n, int k) {

        if (k == 0 || n == 0)
            return 0;
        else if (n == 1) return k;
        else if (n == 2) return k * k;
        else
        {
            int[] f = new int[n + 1];
            f[0] = 0;
            f[1] = k;
            f[2] = k*k;
            for(int i = 3; i <= n; i++)
            {
                f[i] = f[i - 1] * (k - 1) + (k - 1) * f[i - 2];
            }
            return f[n];
        }
    }
}