#1. Firstly, I came up with DFS + BACKTRACK, like this:
1. the visited set's meaning:
    I store the state of the board after swap, and the state should be add into the set, next time if there is another swap make the board
    like this, we should return and do not traverse, this is right but can not get the correct minmum answer.
2. However, we know that there are several ways to get the same state, we should get the mimnum way, only if the current state's move < move,
   which means that we can get to this state by smaller moves, so there is no need for us to traverse this state again.
3. A very confusing thing is that:
   there is no difference between swap(i,j), i, j's sequence will no longer influence the result.

Correct answer:
class Solution {
    int mincount = Integer.MAX_VALUE;
    int[][] direction = {{0, 1}, {-1,0}, {1,0}, {0,-1}};
    public int slidingPuzzle(int[][] board) {
        if(board.length == 0 || board == null) return 0;
        for(int i = 0; i < 2; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                if(board[i][j] == 0)
                {
                    HashMap<String, Integer> map = new HashMap<>();
                    map.put(encode(board), 0);
                    helper(board, i , j, 0, map);
                    break;
                }
            }
        }
        return mincount == Integer.MAX_VALUE? -1: mincount;
    }

    public void helper(int[][] board, int i, int j, int count, HashMap<String, Integer> map){
        if(isValid(board))
        {
            mincount = Math.min(count, mincount);
            return;
        }
        if(count > mincount) return;
        if(map.containsKey(encode(board)))
        {
            if(map.get(encode(board)) < count)
                return;
        }
        map.put(encode(board), count);
        for(int m = 0; m < 4; m++)
        {
            int newi = i + direction[m][0];
            int newj = j + direction[m][1];
            if(newi < 0 || newi >= 2 || newj < 0 || newj >= 3)
                continue;
            swap(board, i, j, newi, newj);
            helper(board, newi, newj, count + 1, map);
            swap(board, i, j, newi, newj);
        }
        return;
    }

    public boolean isValid(int[][] board){
        if(board[0][0] == 1 && board[0][1] == 2 && board[0][2] == 3 && board[1][0] == 4 && board[1][1] == 5 && board[1][2] == 0)
            return true;
        else return false;
    }

    public void swap(int[][] board, int i1, int j1, int i2, int j2){
        int temp = board[i1][j1];
        board[i1][j1] = board[i2][j2];
        board[i2][j2] = temp;
    }

    public String encode(int[][] board){
        String code = board[0][0] + "," + board[0][1] + "," + board[0][2] +"," +
            board[1][0] + "," + board[1][1] + "," + board[1][2];
        return code;
    }
}

Wrong answer:
class Solution {
    int mincount = Integer.MAX_VALUE;
    int[][] direction = {{0, 1}, {-1,0}, {1,0}, {0,-1}};
    public int slidingPuzzle(int[][] board) {
        if(board.length == 0 || board == null) return 0;
        for(int i = 0; i < 2; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                if(board[i][j] == 0)
                {
                    Set<String> visited = new HashSet<>();
                    visited.add(board[0][0] + "," + board[0][1] + "," + board[0][2] +"," + board[1][0] + "," + board[1][1] + "," + board[1][2]);
                    helper(board, i , j, 0, visited);
                    break;
                }
            }
        }
        return mincount == Integer.MAX_VALUE? -1: mincount;
    }

    public void helper(int[][] board, int i, int j, int count, Set<String> visited){
        if(isValid(board))
        {
            System.out.println("valid");
            mincount = Math.min(count, mincount);
            return;
        }
        if(count > mincount) return;
        for(int m = 0; m < 4; m++)
        {
            int newi = i + direction[m][0];
            int newj = j + direction[m][1];
            if(newi < 0 || newi >= 2 || newj < 0 || newj >= 3)
                continue;
            swap(board, i, j, newi, newj);
            if(!visited.contains(encode(board)))
            {
                System.out.println("exchange"+ board[newi][newj] +"to" + board[i][j]);
                visited.add(encode(board));
                helper(board, newi, newj, count + 1, visited);
            }
            swap(board, i, j, newi, newj);
        }
        return;
    }

    public boolean isValid(int[][] board){
        if(board[0][0] == 1 && board[0][1] == 2 && board[0][2] == 3 && board[1][0] == 4 && board[1][1] == 5 && board[1][2] == 0)
            return true;
        else return false;
    }

    public void swap(int[][] board, int i1, int j1, int i2, int j2){
        int temp = board[i1][j1];
        board[i1][j1] = board[i2][j2];
        board[i2][j2] = temp;
    }

    public String encode(int[][] board){
        String code = board[0][0] + "," + board[0][1] + "," + board[0][2] +"," +
            board[1][0] + "," + board[1][1] + "," + board[1][2];
        return code;
    }
}


#BFS when we use BFS, we should consider about two important question!!!
     everytime we need to count, we should focus on the queue.size, everytime the loop means 一层 of the graph.....
     2. 最重要的是！因为数组，链表！都是引用拷贝！所以加入别的数据结构的时候，一定要注意clone一下，否则会走到太平洋！！

class Solution {
    int[][] direction = {{0, 1}, {-1,0}, {1,0}, {0,-1}};
    public int slidingPuzzle(int[][] board) {
        if(isValid(board)){
            return 0;
        }
        Set<String> visited = new HashSet<>();
        Queue<int[][]> q = new LinkedList<>();
        q.add(board);
        visited.add(encode(board));
        int count = 0;
        while(!q.isEmpty())
        {
            int size = q.size();
            for(int x = 0; x < size; x++)
            {
                int[][] temp = q.poll();
                System.out.println(encode(temp));
                int[] result = findzero(temp);
                int i = result[0];
                int j = result[1];
                for(int m = 0; m < 4; m++)
                {
                    int newi = i + direction[m][0];
                    int newj = j + direction[m][1];
                    if(newi < 0 || newi >= 2 || newj < 0 || newj >= 3)
                        continue;
                    swap(temp, i, j, newi, newj);
                    if(isValid(temp))
                    {
                        return count + 1;
                    }
                    else if(visited.contains(encode(temp))){
                        swap(temp, i, j, newi, newj);
                        continue;
                    }
                    else{
                        int[][] clonearray = new int[2][3];
                        for(int k = 0; k < 2; k++)
                        {
                            clonearray[k] = temp[k].clone();
                        }
                        q.add(clonearray);
                        visited.add(encode(temp));
                        swap(temp, i, j, newi, newj);
                    }
                }
            }
            count++;
        }
        return -1;
    }

    public int[] findzero(int[][] temp){
        int[] result = new int[2];
        for(int i = 0; i < 2; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                if(temp[i][j] == 0)
                {
                    result[0] = i;
                    result[1] = j;
                    break;
                }
            }
        }
        return result;
    }

    public boolean isValid(int[][] board){
        if(encode(board).equals("1,2,3,4,5,0"))
            return true;
        else return false;
    }

    public void swap(int[][] board, int i1, int j1, int i2, int j2){
        int temp = board[i1][j1];
        board[i1][j1] = board[i2][j2];
        board[i2][j2] = temp;
    }

    public String encode(int[][] board){
        String code = board[0][0] + "," + board[0][1] + "," + board[0][2] +"," +
            board[1][0] + "," + board[1][1] + "," + board[1][2];
        return code;
    }
}