#1. simple DFS
!! notice that the visited array should be set after DFS!!!
class Solution {
    boolean[][] visited;
    public boolean exist(char[][] board, String word) {
        int m = board.length;
        int n = board[0].length;
        if(m == 0 || n == 0) return false;
        if(word.length() == 0) return true;
        visited = new boolean[m][n];
        for(int i = 0; i < board.length; i++)
        {
            for(int j = 0; j < board[0].length; j++)
            {
                char candidate = board[i][j];
                int count = 0;
                if(candidate == word.charAt(0))
                {
                    if(DFS(board, i, j, 0, word))
                        return true;
                }
            }
        }
        return false;
    }

    public boolean  DFS(char[][] board, int i,int j, int count, String word)
    {
        if(count == word.length())
            return true;
        if(i < 0 || i >= board.length || j < 0 || j >= board[i].length || count > word.length() || visited[i][j])
            return false;
        if(board[i][j] == word.charAt(count))
        {
            visited[i][j] = true;
            boolean right = DFS(board, i, j + 1, count + 1, word);
            boolean left = DFS(board, i, j - 1, count + 1, word);
            boolean up = DFS(board, i - 1, j, count + 1, word);
            boolean down = DFS(board, i + 1, j, count + 1, word);
            if(right == true || left == true || up == true || down == true)
                return true;
        }
        visited[i][j] = false;
        return false;
    }
}

#2. if we do not want to use the visited array, we can change the board when we DFS, like change it to '0'