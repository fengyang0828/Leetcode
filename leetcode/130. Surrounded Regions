#1. 花了一辈子理解题目的意思。。
    就是说只有能被边缘联通的O 不是完全被X surrounded， 这些0 可以保留，而其他的这些0 就必须要变成X

    用DFS 很简单，就是从边缘的0 开始， 然后将所有能连通的0 变成#，然后再遍历一遍， 将所有＃变回0，而所有0 变成 X

class Solution {
    public void solve(char[][] board) {
        if(board == null || board.length == 0 || board[0].length == 0) return;
        int m = board.length;
        int n = board[0].length;
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(i == 0 || i == board.length-1 || j == 0 || j == board[0].length-1){
                    if(board[i][j] == 'O') helper(board, i, j);
                }
            }
        }
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == '#')
                {
                    board[i][j] = 'O';
                }
                else
                {
                    board[i][j] = 'X';
                }

            }
        }
    }

    public void helper(char[][] board, int i, int j){
        int m = board.length;
        int n = board[0].length;
        if(i < 0 || i>= m || j < 0 || j >= n || board[i][j] == 'X' || board[i][j] == '#')
            return;
        board[i][j] = '#';
        helper(board, i + 1, j);
        helper(board, i - 1, j);
        helper(board, i, j + 1);
        helper(board, i, j - 1);
        return;
    }
}

#2. BFS: 思路一样，
class Solution {
    public void solve(char[][] board) {
        if(board == null || board.length == 0 || board[0].length == 0) return;
        int m = board.length;
        int n = board[0].length;
        int[][] direction = {{0, 1}, {-1,0}, {1,0}, {0,-1}};

        Queue<Point> q = new LinkedList<>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(i == 0 || j == 0 || i == m -1 || j == n - 1)
                    if(board[i][j] == 'O')
                    {
                        board[i][j] = '#'; // 注意1！！！
                        q.offer(new Point(i, j));
                    }
                        
            }
        }

        while(!q.isEmpty()){
            Point cur = q.poll();
            for(int k = 0; k < 4; k++){
                int newi = cur.i + direction[k][0];
                int newj = cur.j + direction[k][1];
                if(newi < 0 || newi >= m || newj < 0 || newj >= n)
                        continue;
                if(board[newi][newj] == 'O')
                {
                    q.offer(new Point(newi, newj));
                    board[newi][newj] = '#';
                }
            }
        }

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == '#')
                {
                    board[i][j] = 'O';
                }
                else
                {
                    board[i][j] = 'X';
                }

            }
        }
    }

    private class Point{
        int i;
        int j;

        public Point(int i, int j){
            this.i = i;
            this.j = j;
        }
    }
}