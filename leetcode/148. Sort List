#1. Use the idea of merge sort.
    first split the list to two halves until only have one or no elements.
    and merge them.
    the important thing here is when split into half, we need a pointer pre to mark the node before middle, that we can put pre.next = null to set them
    into two halves.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        // split into two sublist
        ListNode mid = getMiddle(head);
        ListNode left = sortList(head);
        ListNode right = sortList(mid);
        // merge the sublist
        return merge(left, right);
    }

    public ListNode getMiddle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        ListNode pre = head;
        while (fast != null && fast.next != null) {
            pre = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        // here to split the list to two halves
        pre.next = null;
        return slow;
    }

    public ListNode merge(ListNode left, ListNode right) {
        ListNode fakedHead = new ListNode(0);
        ListNode p = fakedHead;
        while (left != null && right != null) {
            if (left.val < right.val) {
                p.next = left;
                left = left.next;
            }
            else {
                p.next = right;
                right = right.next;
            }
            p = p.next;
        }
        if (left != null) {
            p.next = left;
        }
        if (right != null) {
            p.next = right;
        }
        return fakedHead.next;
    }
}