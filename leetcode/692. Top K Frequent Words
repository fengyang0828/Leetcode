#451, #347
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            if (map.containsKey(words[i])) {
                map.put(words[i], map.get(words[i]) + 1);
            }
            else {
                map.put(words[i], 1);
            }
        }

        PriorityQueue<Map.Entry<String, Integer>> pq = new PriorityQueue<>(new Comparator<Map.Entry<String, Integer>>(){
            @Override
            public int compare(Map.Entry<String, Integer> mp1, Map.Entry<String, Integer> mp2) {
                if (mp2.getValue() == mp1.getValue())
                    return mp1.getKey().compareTo(mp2.getKey());
                else
                    return mp2.getValue() - mp1.getValue();
            }
        });

        List<String> result = (ArrayList) new ArrayList<>();
        pq.addAll(map.entrySet());
        while (!pq.isEmpty() && k > 0) {
            Map.Entry<String, Integer> mp = pq.poll();
            result.add(mp.getKey());
            k--;
        }
        return result;
    }
}