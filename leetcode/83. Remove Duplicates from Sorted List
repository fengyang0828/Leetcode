#1. Iterator way to solve this problem
    First time I fail because when cur.val == pre.val, pre should stay but not move forward.
    class Solution {
        public ListNode deleteDuplicates(ListNode head) {
            ListNode dummyHead = new ListNode(-1000000);
            dummyHead.next = head;
            ListNode pre = dummyHead;
            ListNode cur = head;
            while (cur != null) {
                if (cur .val == pre.val) {
                    pre.next = cur.next;
                }
                else {
                    pre = cur;
                }
                cur = cur.next;
            }
            return dummyHead.next;
        }
    }

#2. Recursive way to solve this problem
    class Solution {
        public ListNode deleteDuplicates(ListNode head) {
            // till the last node
            if (head == null || head.next == null) {
                return head;
            }
            head.next = deleteDuplicates(head.next);
            if (head.val == head.next.val) {
                return head.next;
            }
            else {
                return head;
            }
        }
    }