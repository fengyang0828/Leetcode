#1. use hashmap to solve this problem
hashmap is used to store the level and the level and the prefix_length of this level(contains the '/' at end)

class Solution {
    public int lengthLongestPath(String input) {

        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 0);
        String[] strings = input.split("\n");
        int result = 0;
        for(String s: strings)
        {
            // lastindexof means character '\t' last appear at which index
            int level = s.lastIndexOf('\t') + 1;
            int len = s.length() - level;
            int prefix_length = map.get(level);
            if(s.contains("."))
            {
                result = Math.max(result, prefix_length + len);
            }
            else
            {
                map.put(level + 1, prefix_length + len + 1); // here we add 1 means the character "\"
            }
        }
        return result;

    }
}

#2. use stack to solve this problem
idea is to put the prefix_length into the stack, use the stack size to control the level

        Stack<Integer> stack = new Stack<Integer>();
        String[] strings = input.split("\n");
        int result = 0;
        stack.push(0);
        for(String s: strings)
        {
            int level = s.lastIndexOf('\t') + 1;
            int len = s.length() - level;
            while(stack.size() > level + 1)
            {
                stack.pop();
            }
            if(s.contains("."))
            {
                result = Math.max(result, stack.peek() + len);
            }
            else
            {
                stack.push(stack.peek() + len + 1);
            }
        }

        return result;