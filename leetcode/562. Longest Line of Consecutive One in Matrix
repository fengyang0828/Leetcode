#1. Solution: use a 3-D array to store all the state
use an array DP to store four state
dp[i][j][0] the horizational length of line for this spot.
dp[i][j][1] the vertial length of line for this spot.
dp[i][j][2] the digonal length of line for this spot.
dp[i][j][3] the anti-digonal length.

The running time complexity is O(mn* 4) = O(mn)

should focus on that dp array we should only use the one that has been caculated,
if i and j has not been traversed, then we can not use.

    public int longestLine(int[][] M) {
        int max = 0;
        int m = M.length;
        if (m == 0) return max;
        int n = M[0].length;
        int[][][] dp = new int[m][n][4];
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(M[i][j] == 0) continue;
                for(int k = 0; k < 4; k++) dp[i][j][k] = 1;
                if(j > 0) dp[i][j][0] += dp[i][j - 1][0];
                if(i > 0) dp[i][j][1] += dp[i - 1][j][1];
                if(i > 0 && j > 0) dp[i][j][2] += dp[i - 1][j - 1][2];
                if(j < n - 1 && i > 0) dp[i][j][3] += dp[i - 1][j + 1][3];
                max = Math.max(max, Math.max(dp[i][j][0], dp[i][j][1]));
                max = Math.max(max, Math.max(dp[i][j][2], dp[i][j][3]));
            }
        }
        return max;
    }