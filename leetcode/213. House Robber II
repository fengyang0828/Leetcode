#1. Solution 1:
Since we can only rob one of nums[0] and nums[nums.length - 1].
So we can find out the the max of we rob from(0 to n - 1's value) and (1 to n)'s max value
class Solution {

    public int rob(int[] nums) {
        int n = nums.length;
        if(nums.length == 0 || nums == null) return 0;
        if(nums.length == 1) return nums[0];
        return Math.max(helper(nums, 0, n - 1), helper(nums, 1, n));
    }

    public int helper(int[] nums, int start, int end)
    {
        int n = nums.length;
        int previousNotRobbed = 0;
        int previousIsRobbed = 0;
        int current = 0;
        for(int i = start; i < end; i++)
        {

            // if we do not rob this house, currentnotrobbed is the max of we rob or not rob the previous house.
            int currentNotRobbed = Math.max(previousIsRobbed, previousNotRobbed);

            // If we rob the current house, add the current money robbed to what we got from not robbing previous
            int currentIsRobbed = previousNotRobbed + nums[i];

            // update the value for next iterator
            previousNotRobbed = currentNotRobbed;
            previousIsRobbed =  currentIsRobbed;
        }
        return Math.max(previousNotRobbed, previousIsRobbed);
    }
}